// Keywords: nonWF, non-Wright-Fisher, continuous space, continuous spatial landscape, selfing, spatial competition, spatial mate choice

initialize() {
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(dimensionality="xy");
	initializeTreeSeq();
	
	// Some biological constants
	defineConstant("Y", 4); // Number of ticks per year	
	defineConstant("settlementAge", 1*Y);
	defineConstant("K", 300);   // carrying-capacity density
	defineConstant("SA", 0.1);  // sigma_S, the spatial interaction width for Adults (settlement + reproduction)
	defineConstant("SJ", 2.0);  // sigma_S, the spatial interaction width for Juveniles (dispersal)
	defineConstant("adultSurvivalProb", 0.70);
	defineConstant("juvenileSurvivalProb", 0.15);
	defineConstant("P", 300);	// population starting size

	
	// Fecundity & Reproduction
	
	defineConstant("FECUN", 20.0); // mean fecundity
	defineConstant("RHO", FECUN/((1+FECUN) * K)); // constant in spatial competition function
	

	
	// Genome
	defineConstant("G", 1e6);   // Genome length 1 Mbp for now
	//defineConstant("Mu", 1e-8); // Mutation Rate
	defineConstant("Re", 1e-8); // Recombination Rate
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, G-1);
	initializeMutationRate(0); // Keeping this as 0 for the TreeSequence analysis
	initializeRecombinationRate(Re);
	
	// Map
	defineConstant("min_l", 1); // How easy it is to live in water
	defineConstant("max_l", 20); // How difficult it is to live on land 
	defineConstant("image_location", "./coos-bay-habitat-extended.png"); // map file location
	if (!exists("W")) defineConstant("W", 10.80);  // width of the simulated area
	if (!exists("H")) defineConstant("H", 10.80);  // height of the simulated area
	
	// spatial competition
	initializeInteractionType(1, "xy", reciprocal=T, maxDistance=SA*3);
	i1.setInteractionFunction("n", 1.0, SA);
	// Limit spatial competition below a certain age
	i1.setConstraints("both", minAge=settlementAge);
	
	// spatial mate choice
	initializeInteractionType(2, "xy", reciprocal=T, maxDistance=SA);
	i2.setInteractionFunction("n", 1.0, SA);
	// Both exerter and receiver can only mate if they're old enough, aka if they have settled
	i2.setConstraints("both", minAge=settlementAge);
}
1 early() {
	sim.addSubpop("p1", asInteger(K * W * H));
	p1.setSpatialBounds(c(0, 0, W, H));
	p1.individuals.setSpatialPosition(p1.pointUniform(asInteger(K * W * H)));
	p1.individuals.age = rdunif(34992, min=1, max=3);
	
	// Process the map
	mapImage = Image(image_location);
	map_vals = (1-mapImage.floatR) *(max_l-min_l);	
	map_vals = p1.defineSpatialMap("world", "xy", map_vals, valueRange=c(min_l, max_l), colors=c('#FFFFFF', '#000000'));
	defineConstant("Map", map_vals);
}
2: first() {
	// look for mates
	i2.evaluate(p1);
}
reproduction() {
	// choose our nearest neighbor as a mate, within the max distance
	mate = i2.nearestInteractingNeighbors(individual, 1);
	// Update this with the nearbyPoint functions
	if (mate.size() > 0)
		subpop.addCrossed(individual, mate, count=rpois(1, FECUN));
}
early() {
	
	// Set the two age classes
	// Juveniles: can disperse, cannot reproduce
	// Adults: cannot disperse, can reproduce
	juveniles = p1.subsetIndividuals(maxAge = settlementAge-1); // Define juveniles as younger than settlement age
	adults = p1.subsetIndividuals(minAge = settlementAge);  // Adults are older than settlement age

	// Set dispersal for the juveniles
	pos = juveniles.spatialPosition;
	// Enable dispersal only in the juveniles
	pos = Map.sampleNearbyPoint(pos, 3*SJ, "n", SJ);
	juveniles.setSpatialPosition(pos);
	
	// spatial competition provides density-dependent selection
	i1.evaluate(p1);
	competition = i1.localPopulationDensity(adults);
	// Add and if statement so the fitness reductions is only in adults, aka juveniles are floating around and do not compete with the adults
	// Determine the location in the map to scale the fitness
	adult_local_l = p1.spatialMapValue("world", adults.spatialPosition);
	juvs_local_l = p1.spatialMapValue("world", juveniles.spatialPosition);
	// Scale the juvenile and adult fitness based on a survival probability
	// TODO: scale this with age???
	adults.fitnessScaling = 1/(1 + (RHO * competition / adult_local_l)); //*adultSurvivalProb;
	juveniles.fitnessScaling = juvenileSurvivalProb ;//juvenileSurvivalProb * juvs_local_l ;
}
early (){
	// first, conduct age-related mortality with killIndividuals()
	inds = p1.individuals;
	ages = inds.age;
	
	inds6 = inds[ages == 6*Y];
	inds7 = inds[ages == 7*Y];
	inds8 = inds[ages >= 8*Y];
	death6 = (runif(inds6.size()) < 0.10);
	death7 = (runif(inds7.size()) < 0.30);
	sim.killIndividuals(c(inds6[death6], inds7[death7], inds8));
}
100 late() { }

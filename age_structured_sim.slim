// Keywords: nonWF, non-Wright-Fisher, continuous space, continuous spatial landscape, selfing, spatial competition, spatial mate choice

initialize() {
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(dimensionality="xy");
	initializeTreeSeq();

	// NOTE: I adjusted K and FECUN so this could run on my machine for troubleshooting, but these need to be adjusted further.

	// Some biological constants
	defineConstant("settlementAge", 2);
	defineConstant("K", 10000);  // carrying-capacity density
	defineConstant("SA", 0.1);  // sigma_S, the spatial interaction width for Adults (settlement + reproduction)
	defineConstant("SJ", 10.0);  // sigma_S, the spatial interaction width for Juveniles (dispersal)
	defineConstant("adultSurvivalProb", 0.9);
	defineConstant("juvenileSurvivalProb", 0.1);
	// TODO: Add this as a transitory stage for adults shortly after settlement
	defineConstant("settlementSurvivalProb",0.6);

	// Fecundity & Reproduction
	defineConstant("FECUN", 1500.0); // mean fecundity
	defineConstant("RHO", FECUN/((1+FECUN) * K)); // constant in spatial competition function
	defineConstant("PBROOD", 0.4); // Proportion of the population brooding, see Berger 2009 Mar Eco

	// Genome
	defineConstant("G", 1e6);   // Genome length 1 Mbp for now
	//defineConstant("Mu", 1e-8); // Mutation Rate
	defineConstant("Re", 1e-8); // Recombination Rate
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, G-1);
	initializeMutationRate(0); // Keeping this as 0 for the TreeSequence analysis
	initializeRecombinationRate(Re);

	// Maps
	// Map 1: Water vs Land for juvenile dispersal
	defineConstant("coast_image_location", "./coos-bay-coast.png"); // map file location
	// Map 2: Available habitat for adults
	defineConstant("habitat_image_location", "./coos-bay-habitat.png"); // map file location
	// This applies to both maps
	defineConstant("min_l", 1); // How easy it is to live in water
	defineConstant("max_l", 20); // How difficult it is to live on land 
	if (!exists("W")) defineConstant("W", (10.80*1));  // width of the simulated area
	if (!exists("H")) defineConstant("H", (10.80*1));  // height of the simulated area
	

	// spatial competition
	initializeInteractionType(1, "xy", reciprocal=T, maxDistance=SA*3);
	i1.setInteractionFunction("n", 1.0, SA);
	// Limit spatial competition below a certain age
	i1.setConstraints("both", minAge=settlementAge+1);

	// spatial mate choice
	initializeInteractionType(2, "xy", reciprocal=T, maxDistance=SA);
	i2.setInteractionFunction("n", 1.0, SA);
	// Both exerter and receiver can only mate if they're old enough, aka if they have settled
	i2.setConstraints("both", minAge=settlementAge+1);
}
1 early() {
	sim.addSubpop("p1", asInteger(K * W * H));
	p1.setSpatialBounds(c(0, 0, W, H));
	p1.individuals.setSpatialPosition(p1.pointUniform(asInteger(K * W * H)));

	// Process the maps
	// Map 1:
	map1Image = Image(coast_image_location);
	map1_vals = (1-map1Image.floatR) *(max_l-min_l);	
	map1_vals = p1.defineSpatialMap("water", "xy", map1_vals,
						valueRange=c(min_l, max_l), colors=c('#FFFFFF', '#000000'));
	defineConstant("Map1", map1_vals);
	// Map 2:
	map2Image = Image(habitat_image_location);
	map2_vals = (1-map2Image.floatR) *(max_l-min_l);	
	map2_vals = p1.defineSpatialMap("habitat", "xy", map2_vals,
						valueRange=c(min_l, max_l), colors=c('#FFFFFF', '#000000'));
	defineConstant("Map2", map2_vals);
	
}
2: first() {
	// look for mates
	i2.evaluate(p1);
}
reproduction() {
	// choose our nearest neighbor as a mate, within the max distance
	mate = i2.nearestInteractingNeighbors(individual, 1);
	// Update this with the nearbyPoint functions
	// PBROOD defines the proportion of the population that is actively brooding
	// This is something than can be conditional to env
	if ((mate.size() > 0) & (runif(1) < PBROOD))
		subpop.addCrossed(individual, mate, count=rpois(1, FECUN));
}
early() {
	
	// Set the two age classes
	// Juveniles: can disperse, cannot reproduce
	// Adults: cannot disperse, can reproduce
	juveniles = p1.subsetIndividuals(maxAge = settlementAge); // Define juveniles as younger than settlement age
	adults = p1.subsetIndividuals(minAge = settlementAge+1);  // Adults are older than settlement age

	// Set dispersal for the juveniles
	pos = juveniles.spatialPosition;
	// Enable dispersal only in the juveniles
	pos = Map1.sampleNearbyPoint(pos, 3*SJ, "n", SJ);
	juveniles.setSpatialPosition(pos);
	
	// spatial competition provides density-dependent selection
	i1.evaluate(p1);
	competition = i1.localPopulationDensity(adults);
	// Add and if statement so the fitness reductions is only in adults, aka juveniles are floating around and do not compete with the adults
	// Determine the location in the map to scale the fitness
	adult_local_l = p1.spatialMapValue("habitat", adults.spatialPosition);
	juvs_local_l = p1.spatialMapValue("water", juveniles.spatialPosition);
	// Scale the juvenile and adult fitness based on a survival probability
	// TODO: scale this with age???
	adults.fitnessScaling = 1/(1 + (RHO * competition / adult_local_l)); //*adultSurvivalProb;
	juveniles.fitnessScaling = juvenileSurvivalProb ;//juvenileSurvivalProb * juvs_local_l ;
}

early (){
	// first, conduct age-related mortality with killIndividuals()
	inds = p1.individuals;
	ages = inds.age;
	
	ticks_per_year = 3;

	inds8 = inds[ages == (8*ticks_per_year)];
	inds9 = inds[ages == (9*ticks_per_year)];
	inds10 = inds[ages >= (10*ticks_per_year)];
	death8 = (runif(inds8.size()) < 0.10);
	death9 = (runif(inds9.size()) < 0.30);
	death10 = (runif(inds10.size()) < 0.95);
	sim.killIndividuals(c(inds8[death8], inds9[death9], inds10[death10]));
}
300 late() { }

// Keywords: nonWF, non-Wright-Fisher, continuous space, continuous spatial landscape, selfing, spatial competition, spatial mate choice

initialize() {
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(dimensionality="xy");
	initializeTreeSeq();

	// NOTE: I adjusted K and FECUN so this could run on my machine for troubleshooting, but these need to be adjusted further.

	// Some biological constants
	defineConstant("settlementAge", 2);
	// TODO: This has to be largely increased, since now it has 10K^2 adults per 10Km x 10Km
	defineConstant("K", 10000);  // carrying-capacity density
	// Adult mating distance is VERY small, so just scale it by K
	defineConstant("SA", 1/sqrt(K));  // sigma_S, the spatial interaction width for Adults (settlement + reproduction)
	defineConstant("SJ", 10.0);  // sigma_S, the spatial interaction width for Juveniles (dispersal)
	defineConstant("adultSurvivalProb", 0.9);
	defineConstant("juvenileSurvivalProb", 0.1);
	// TODO: Add this as a transitory stage for adults shortly after settlement
	defineConstant("settlementSurvivalProb",0.6);

	// Fecundity & Reproduction
	defineConstant("FECUN", 1500); // mean fecundity
	defineConstant("RHO", FECUN/((1+FECUN) * K)); // constant in spatial competition function
	defineConstant("PBROOD", 0.4); // Proportion of the population brooding, see Berger 2009 Mar Eco

	// Genome
	defineConstant("G", 1e6);   // Genome length 1 Mbp for now
	//defineConstant("Mu", 1e-8); // Mutation Rate
	defineConstant("Re", 1e-8); // Recombination Rate
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, G-1);
	initializeMutationRate(0); // Keeping this as 0 for the TreeSequence analysis
	initializeRecombinationRate(Re);
	
	// TODO: create smoothed dispersal map
	// Point 1 of Peter's new method
	// Use this to initialize grid:


	// for each grid cell midpoint j:
	//	    x = rep(midpoint, 10000)
	//     for k in step_to_settlement (i.e., 1:2)
	//          x += dispersal (from the map sample nearby point, later more complex maybe)
	//     # add to smoothed map at cell j
	//     smoothed map[j] = mean(mapValues(x))

	// Maps
	// Map 1: Water vs Land for juvenile dispersal
	defineConstant("coast_image_location", "./coos-bay-coast.png"); // map file location
	// Map 2: Available habitat for adults
	defineConstant("habitat_image_location", "./coos-bay-habitat.png"); // map file location
	// This applies to both maps
	defineConstant("min_l", 1); // How easy it is to live in water
	defineConstant("max_l", 20); // How difficult it is to live on land 
	if (!exists("W")) defineConstant("W", (10.80*1));  // width of the simulated area
	if (!exists("H")) defineConstant("H", (10.80*1));  // height of the simulated area
	

	// spatial competition
	initializeInteractionType(1, "xy", reciprocal=T, maxDistance=SA*3);
	i1.setInteractionFunction("n", 1.0, SA);

	// spatial mate choice
	initializeInteractionType(2, "xy", reciprocal=T, maxDistance=SA);
	i2.setInteractionFunction("n", 1.0, SA);
}
1 first() {
	sim.addSubpop("p1", asInteger(K * W * H));
	p1.setSpatialBounds(c(0, 0, W, H));
	p1.individuals.setSpatialPosition(p1.pointUniform(asInteger(K * W * H)));

	// Process the maps
	// Map 1:
	map1Image = Image(coast_image_location);
	map1_vals = (1-map1Image.floatR) *(max_l-min_l);	
	map1_vals = p1.defineSpatialMap("water", "xy", map1_vals,
						valueRange=c(min_l, max_l), colors=c('#FFFFFF', '#000000'));
	defineConstant("Map1", map1_vals);

	// create dispersal map
	grid_dims = asInteger(2 * (p1.spatialBounds[c(2,3)] - p1.spatialBounds[c(0,1)]) / SA);
	dispersal_map = matrix(rep(0, grid_dims[0]*grid_dims[1]), nrow=grid_dims[0], ncol=grid_dims[1]);

	for (_ in range(100)){
		for (timestep in range(settlementAge)){
			pos = Map1.sampleNearbyPoint(p1.individuals.spatialPosition, 3*SJ, "n", SJ);
			p1.individuals.setSpatialPosition(pos);
		}
		dispersal_map = dispersal_map + summarizeIndividuals(p1.individuals, grid_dims, p1.spatialBounds, "individuals.size()/(K * W * H);");
		p1.individuals.setSpatialPosition(p1.pointUniform(asInteger(K * W * H)));
	}
	dispersal_map = dispersal_map / 100;
	dispersal_map = p1.defineSpatialMap("dispersal_map", "xy", dispersal_map);
	defineConstant("DISPERSAL_MAP", dispersal_map);

	// Map 2:
	map2Image = Image(habitat_image_location);
	map2_vals = (1-map2Image.floatR) *(max_l-min_l);	
	map2_vals = p1.defineSpatialMap("habitat", "xy", map2_vals,
						valueRange=c(min_l, max_l), colors=c('#FFFFFF', '#000000'));
	defineConstant("Map2", map2_vals);
	
	// add a second subpopulations for offspring until it reaches settlement age
	sim.addSubpop("p2", 0);
}

first() {
	// look for mates
	i2.evaluate(p1);
}

reproduction(p1) {
	// choose our nearest neighbor as a mate, within the max distance
	mate = i2.nearestInteractingNeighbors(individual, 1);
	// Update this with the nearbyPoint functions
	// PBROOD defines the proportion of the population that is actively brooding
	// This is something than can be conditional to env

	// Todo : define map_val as a convolution between dispersal map and habitat map (not sure if smooth can do this because it looks like the kernel has to be a pre-defined probability distribution like normal distribution)	
	fecun = 1.1;
	offspring_count = rpois(1, fecun);
	if ((mate.size() > 0) & (runif(1) < PBROOD) & (offspring_count>0))
		// Point 2 of peter's method:
		// Adjust fecundity based on the smoothed habitat map
		// i.e., reproduction only produces a small number of VIABLE offspring (most die, only a few settle).
		// Send the new offspring to population 2 to account for time-delay between reproduction and them becoming new adults. And the reproduction callback will only go through population 1.
		p2.addCrossed(individual, mate, count=rpois(1, offspring_count));
}
early() {
	new_adults = p2.subsetIndividuals(minAge = settlementAge);
	// set settlement positions of the new adults
	pos = new_adults.spatialPosition;
	pos = Map2.sampleNearbyPoint(pos, settlementAge*3*SJ, "n", settlementAge*SJ);
	new_adults.setSpatialPosition(pos);
	// new adults "migrate" to p1
	p1.takeMigrants(new_adults);
	// spatial competition provides density-dependent selection
	i1.evaluate(p1);
	competition = i1.localPopulationDensity(p1.individuals);
	// Add and if statement so the fitness reductions is only in adults, aka juveniles are floating around and do not compete with the adults
	// Determine the location in the map to scale the fitness
	adult_local_l = p1.spatialMapValue("habitat", p1.individuals.spatialPosition);
	p1.individuals.fitnessScaling = 1/(1 + (RHO * competition / adult_local_l));
}

early (){
	// first, conduct age-related mortality with killIndividuals()
	inds = p1.individuals;
	ages = inds.age;
	
	ticks_per_year = 3;

	inds8 = inds[ages == (8*ticks_per_year)];
	inds9 = inds[ages == (9*ticks_per_year)];
	inds10 = inds[ages >= (10*ticks_per_year)];
	death8 = (runif(inds8.size()) < 0.10);
	death9 = (runif(inds9.size()) < 0.30);
	death10 = (runif(inds10.size()) < 0.95);
	sim.killIndividuals(c(inds8[death8], inds9[death9], inds10[death10]));
}
300 late() { }
